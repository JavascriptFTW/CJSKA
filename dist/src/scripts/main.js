(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
"use strict";

module.exports = {
    signup: function signup() {
        $("#signupError").addClass("hidden");

        var _user = $("#signupModal [name=username]").val();
        var _mail = $("#signupModal [name=email]").val();
        var _pass = $("#signupModal [name=password]").val();
        var _conf = $("#signupModal [name=confpass]").val();

        if (_pass !== _conf) {
            $("#signupError").removeClass("hidden");
        } else {
            var newUser = new Parse.User();

            newUser.set("username", _user);
            newUser.set("password", _conf);
            newUser.set("email", _mail);

            newUser.signUp(null, {
                success: function success(data) {
                    Parse.User.logIn(_user, _conf, {
                        success: function success() {
                            window.location.reload();
                        }
                    });
                },
                error: function error(data, _error) {
                    $("#signupError").removeClass("hidden");

                    console.error(_error);
                }
            });
        }
    },
    login: function login() {
        var _name = $("#loginModal [name=username]").val();
        var _pass = $("#loginModal [name=password]").val();

        console.log(_name, _pass);

        Parse.User.logIn(_name, _pass, {
            success: function success(data) {
                window.location.reload();
            },
            error: function error(data, _error2) {
                $("#loginFailed").removeClass("hidden");

                console.error(_error2);
            }
        });
    }
};

},{}],2:[function(require,module,exports){
"use strict";

module.exports = (function (deps) {
    var lostDeps = [];

    for (var depInd = 0; depInd < deps.length; depInd++) {
        if (!window.hasOwnProperty(deps[depInd])) {
            lostDeps.push(deps[depInd]);
        }
    }

    if (lostDeps.length > 0) {
        console.error("Unable to find all required dependencies! Exiting.");
        console.log("Dependencies not found:", lostDeps.join(","));

        return {};
    }

    return {
        setupPage: require("./setupPage.js")
    };
})(["jQuery", "Parse"]);

},{"./setupPage.js":3}],3:[function(require,module,exports){
"use strict";

var authentication = require("./authentication.js");

var createLoginForm = function createLoginForm() {
    return $("<div>").append($("<div>").addClass("alert alert-danger hidden").attr("id", "loginFailed").text("An error occurred. Try again in a few minutes.")).append($("<div>").addClass("form-group").append($("<label>").attr("for", "username").text("Username")).append($("<input>").attr("type", "text").attr("name", "username").addClass("form-control"))).append($("<div>").addClass("form-group").append($("<label>").attr("for", "password").text("Password")).append($("<input>").attr("type", "password").attr("name", "password").addClass("form-control")));
};

var createSignupForm = function createSignupForm() {
    return $("<div>").append($("<div>").addClass("alert alert-danger hidden").attr("id", "signupError").text("An error occurred. Try again in a few minutes.")).append($("<div>").addClass("form-group").append($("<label>").attr("for", "username").text("Username")).append($("<input>").attr("type", "text").attr("name", "username").addClass("form-control"))).append($("<div>").addClass("form-group").append($("<label>").attr("for", "email").text("Email Address")).append($("<input>").attr("type", "email").attr("name", "email").addClass("form-control"))).append($("<div>").addClass("form-group").append($("<label>").attr("for", "password").text("Password")).append($("<input>").attr("type", "password").attr("name", "password").addClass("form-control"))).append($("<div>").addClass("form-group").append($("<label>").attr("for", "confpass").text("Confirm Password")).append($("<input>").attr("type", "password").attr("name", "confpass").addClass("form-control")));
};

var setupModals = function setupModals() {
    // Login Modal
    $("body").append($("<div>").addClass("modal fade").attr("role", "dialog").attr("id", "loginModal").append($("<div>").addClass("modal-dialog").append($("<div>").addClass("modal-content").append(
    // Start Modal Header
    $("<div>").addClass("modal-header").append($("<button>").addClass("close").attr("data-dismiss", "modal").attr("aria-label", "Close").append($("<span>").attr("aria-hidden", "true").html("&times;"))).append($("<h4>").addClass("modal-title").text("Log In"))
    // End Modal Header
    ).append(
    // Start Modal Body
    $("<div>").addClass("modal-body").append(createLoginForm())
    // End Modal Body
    ).append(
    // Start Modal Footer
    $("<div>").addClass("modal-footer").append($("<div>").addClass("form-group").append($("<button>").addClass("btn btn-success").text("Submit").on("click", function () {
        authentication.login();
    })))
    // End Modal Footer
    ))));

    // Sign up Modal
    $("body").append($("<div>").addClass("modal fade").attr("role", "dialog").attr("id", "signupModal").append($("<div>").addClass("modal-dialog").append($("<div>").addClass("modal-content").append(
    // Start Modal Header
    $("<div>").addClass("modal-header").append($("<button>").addClass("close").attr("data-dismiss", "modal").attr("aria-label", "Close").append($("<span>").attr("aria-hidden", "true").html("&times;"))).append($("<h4>").addClass("modal-title").text("Sign Up"))
    // End Modal Header
    ).append(
    // Start Modal Body
    $("<div>").addClass("modal-body").append(createSignupForm())
    // End Modal Body
    ).append(
    // Start Modal Footer
    $("<div>").addClass("modal-footer").append($("<div>").addClass("form-group").append($("<button>").addClass("btn btn-success").text("Sign Up").on("click", function () {
        authentication.signup();
    })))
    // End Modal Footer
    ))));
};

module.exports = function () {
    // NOTE: This **has** to go at the very top of this function,
    //  otherwise we can't use the Parse JS SDK.
    Parse.initialize("F4jHkOZFPQTGPZ23D1CqaNxmbLqoAUAxBzcnlWQn", "Zt177eOpCUI12dvHbBaIAaf8MZdXqkjsZYlagRul");

    // Setup any modals that we might need on the page
    setupModals();

    // Fetch the currently logged in user, and store them in a variable
    //  called "currentUser".
    var currentUser = Parse.User.current();

    // If the user isn't logged in, we'll display some buttons that allow
    //  them to sign up or login.
    //
    // If the user is logged in, then we'll display a welcome message.
    //
    if (currentUser === null) {
        $("body").append($("<button>").text("Sign in").on("click", function () {
            $("#loginModal").modal();
        })).append($("<button>").text("Sign up").on("click", function () {
            $("#signupModal").modal();
        }));
    } else {
        var query = new Parse.Query(Parse.User).equalTo("objectId", currentUser.id).limit(1);
        query.find({
            success: function success(data) {
                var username = data[0].attributes.username;

                $(".container-fluid").append($("<h3>").text("Welcome, " + username)).append($("<button>").addClass("btn btn-danger").text("Logout").on("click", function () {
                    Parse.User.logOut();
                    window.location.reload();
                }));
            }
        });
    }
};

},{"./authentication.js":1}],4:[function(require,module,exports){
"use strict";

var helpers = require("./helpers/helpers.js");

$(function () {
    helpers.setupPage();
});

},{"./helpers/helpers.js":2}]},{},[4])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
